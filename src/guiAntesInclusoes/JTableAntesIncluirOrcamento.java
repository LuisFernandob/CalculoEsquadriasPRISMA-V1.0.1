package guiAntesInclusoes;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import dao.Cliente;
import dao.ClienteDAO;
import gui.TelaOrcamentos;
import guiIncluirAlterar.JTableIncluirAlterarOrcamento;

/**
*
* @author luisf
*/
@SuppressWarnings("serial")
public class JTableAntesIncluirOrcamento extends javax.swing.JFrame implements KeyListener {

   /**
    * Creates new form JTableAntesIncluirItemOrcamento
    */
   public JTableAntesIncluirOrcamento() {
	   addKeyListener(this);
	   setFocusable(true);
       setFocusTraversalKeysEnabled(false);
	   initComponents();
	   DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
       jTable1.setRowSorter(new TableRowSorter<DefaultTableModel>(modelo));
       readJTable();
   }
   
   public void lerJTableParaNome(String nome) {
       
	   DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
       jTable1.setRowSorter(new TableRowSorter<DefaultTableModel>(modelo));
       modelo.setNumRows(0);
       ClienteDAO cdao = new ClienteDAO();
       for (Cliente c : cdao.lerParaNome(nome)) {
           modelo.addRow(new Object[]{
           c.getIdCliente(),
           c.getNome(),
           c.getEmpresa(),
           c.getTelefone(),
           c.getEndereco(),
           c.getEmail(),
           c.getDataNascimento(),
           c.getCnpj(),
           c.getCpf(),
           c.getObservacoes()
           });
       }
   }
   

   public void readJTable() {
       
	   DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
       jTable1.setRowSorter(new TableRowSorter<DefaultTableModel>(modelo));
       modelo.setNumRows(0);
       ClienteDAO cdao = new ClienteDAO();
       	for (Cliente c : cdao.lerTabela()) {
       		modelo.addRow(new Object[]{            			
               c.getIdCliente(),
               c.getNome(),
               c.getEmpresa(),        
               c.getTelefone(),                  
               c.getEndereco(),        
               c.getEmail(),        
               c.getDataNascimento(),        
               c.getCnpj(),        
               c.getCpf(),
               c.getObservacoes()       
       		});
       	}
   }
   
   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   
   // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
   private void initComponents() {

	   setTitle("Sistema para cálculo de esquadrias -> Orçamentos -> Escolher cliente para incluir");
       jLabel1 = new javax.swing.JLabel();
       jPanel2 = new javax.swing.JPanel();
       jTextField1 = new javax.swing.JTextField();
       jLabel2 = new javax.swing.JLabel();
       scrollPane1 = new java.awt.ScrollPane();
       jScrollPane1 = new javax.swing.JScrollPane();
       jTable1 = new javax.swing.JTable();

       setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

       jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
       jLabel1.setText("Clique duas vezes sobre o cliente escolhido:");

       jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Localizar"));

       jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
           public void keyTyped(java.awt.event.KeyEvent evt) {
               jTextField1KeyTyped(evt);
           }
       });
       jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
           public void keyPressed(java.awt.event.KeyEvent evt) {
               jTextField1keyPressed(evt);
           }
       });
       

       jLabel2.setText("Digite alguma palavra contida no nome do cliente desejado para filtrar a tabela.");

       javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
       jPanel2.setLayout(jPanel2Layout);
       jPanel2Layout.setHorizontalGroup(
           jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(jPanel2Layout.createSequentialGroup()
               .addContainerGap()
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                   .addGroup(jPanel2Layout.createSequentialGroup()
                       .addComponent(jLabel2)
                       .addGap(0, 80, Short.MAX_VALUE)))
               .addContainerGap())
       );
       jPanel2Layout.setVerticalGroup(
           jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
       );

       jTable1.setModel(new javax.swing.table.DefaultTableModel(
               new Object [][] {},
               new String [] {
                   "idcliente", "nome","empresa","telefone", "endereco", "email", "nascimento", "cnpj","cpf","observacoes"}
           ) { boolean[] podeEditar = new boolean [] {false, false, false, false, false, false, false, false, false, false};
               public boolean isCellEditable(int rowIndex, int columnIndex) {
                   return podeEditar [columnIndex];
               }
           });
       
       jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
           public void mouseClicked(java.awt.event.MouseEvent evt) {
               jTable1MouseClicked(evt);
           }
       });
       jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
           public void keyPressed(java.awt.event.KeyEvent evt) {
               jTable1KeyPressed(evt);
           }
       });
       jScrollPane1.setViewportView(jTable1);

       scrollPane1.add(jScrollPane1);

       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
       getContentPane().setLayout(layout);
       layout.setHorizontalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addContainerGap()
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                   .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                   .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addContainerGap())
       );
       layout.setVerticalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jLabel1)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
               .addContainerGap())
       );

       pack();
       Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
   	   this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
   }// </editor-fold>                        

   int selecao = -1;
   int linhaSelecionada = -1;
   
   private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
	 	
   	if (selecao != -1) {
   		if (selecao == 0 && linhaSelecionada == jTable1.getSelectedRow()) {
   			selecao = jTable1.getSelectedRow();
   	  
   	
   			if (jTable1.getSelectedRow() != -1) {
   				
   				ClienteDAO cdao = new ClienteDAO();

   				Cliente c = cdao.lerObjCliente(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
   				
   				this.dispose();
   				new JTableIncluirAlterarOrcamento(c).setVisible(true);
                            
   			} else {JOptionPane.showMessageDialog(null, "Selecione componente para incluir!");}
   		selecao = -1;
   		linhaSelecionada = -1;
   		} else { selecao = -1; linhaSelecionada = -1;}
   	} else {selecao = 0; linhaSelecionada = jTable1.getSelectedRow();}   
   }  
   
   private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {                                   
		
	   int key = evt.getKeyCode();
	   	
	   	if(key == KeyEvent.VK_ENTER)
	        {
	            
	   		if (jTable1.getSelectedRow() != -1) {
					
					ClienteDAO cdao = new ClienteDAO();

					Cliente c = cdao.lerObjCliente(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
					
					this.dispose();
					new JTableIncluirAlterarOrcamento(c).setVisible(true);
	                        
				} else {JOptionPane.showMessageDialog(null, "Selecione componente para incluir!");}
	   		
	        } else if(key == KeyEvent.VK_ESCAPE)
	        {
	            
	   		this.dispose();
	   		new TelaOrcamentos().setVisible(true);
	   		 
	        }   
   }                                  

   private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {                                     
       lerJTableParaNome(jTextField1.getText());            
   }          
   
   private void jTextField1keyPressed(java.awt.event.KeyEvent evt) {                                     
	  	
	   int key = evt.getKeyCode();
	   	
	   	if(key == KeyEvent.VK_ENTER)
	        {
	            
	   		if (jTable1.getSelectedRow() != -1) {
					
					ClienteDAO cdao = new ClienteDAO();

					Cliente c = cdao.lerObjCliente(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
					
					this.dispose();
					new JTableIncluirAlterarOrcamento(c).setVisible(true);
	                        
				} else {JOptionPane.showMessageDialog(null, "Selecione componente para incluir!");}
	   		
	        } else if(key == KeyEvent.VK_ESCAPE)
	        {
	            
	   		this.dispose();
	   		new TelaOrcamentos().setVisible(true);
	   		 
	        }
	   	           
   }   

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
       /* Set the Nimbus look and feel */
       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
       /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        */
       try {
           for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
               if ("Nimbus".equals(info.getName())) {
                   javax.swing.UIManager.setLookAndFeel(info.getClassName());
                   break;
               }
           }
       } catch (ClassNotFoundException ex) {
           java.util.logging.Logger.getLogger(JTableAntesIncluirOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (InstantiationException ex) {
           java.util.logging.Logger.getLogger(JTableAntesIncluirOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (IllegalAccessException ex) {
           java.util.logging.Logger.getLogger(JTableAntesIncluirOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (javax.swing.UnsupportedLookAndFeelException ex) {
           java.util.logging.Logger.getLogger(JTableAntesIncluirOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
       //</editor-fold>
       //</editor-fold>

       /* Create and display the form */
       java.awt.EventQueue.invokeLater(new Runnable() {
           public void run() {
               new JTableAntesIncluirOrcamento().setVisible(true);
           }
       });
   }

   // Variables declaration - do not modify                     
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTable jTable1;
   private javax.swing.JTextField jTextField1;
   private java.awt.ScrollPane scrollPane1;
   // End of variables declaration                   
   @Override
   public void keyTyped(KeyEvent e) {
   	
   	
   }

   @Override
   public void keyPressed(KeyEvent e) {
   	 
   	int key = e.getKeyCode();
   	
   	if(key == KeyEvent.VK_ENTER)
        {
            
   		if (jTable1.getSelectedRow() != -1) {
				
				ClienteDAO cdao = new ClienteDAO();

				Cliente c = cdao.lerObjCliente(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
				
				this.dispose();
				new JTableIncluirAlterarOrcamento(c).setVisible(true);
                        
			} else {JOptionPane.showMessageDialog(null, "Selecione componente para incluir!");}
   		
        } else if(key == KeyEvent.VK_ESCAPE)
        {
            
   		this.dispose();
   		new TelaOrcamentos().setVisible(true);
   		 
        }
   	 
   	 
   	
   }

   @Override
   public void keyReleased(KeyEvent e) {
   	// TODO Auto-generated method stub
   	
   }
   }

